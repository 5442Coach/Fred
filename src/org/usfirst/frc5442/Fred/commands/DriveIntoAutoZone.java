// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5442.Fred.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc5442.Fred.Robot;

/**
 *
 */
//@SuppressWarnings("unused")
public class  DriveIntoAutoZone extends Command {

    public DriveIntoAutoZone() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.encoders.encoderLeft.reset();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//distance(in)/12.56/1.5
    	while (abs(Robot.encoders.encoderLeft.getDistance()) < 19.5)
    	{
    		Robot.driveTrain.driveStraight(-.5);
    		System.out.println(Robot.encoders.encoderLeft.getDistance());
    	}
    	System.out.println("Its not a infinite loop");
    	Robot.driveTrain.driveStraight(0);
    	
    	
    }

    private double abs(double distance) {
		if (distance < 0)
		{
			distance = distance * -1;
		}
		return distance;
	}

	// Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveTrain.driveStraight(0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
