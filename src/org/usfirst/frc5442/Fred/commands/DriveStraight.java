package org.usfirst.frc5442.Fred.commands;

//RobotBuilder Version: 1.5
//
//This file was generated by RobotBuilder. It contains sections of
//code that are automatically generated and assigned by robotbuilder.
//These sections will be updated in the future when you export to
//Java from RobotBuilder. Do not put any code or make any change in
//the blocks indicating autogenerated code or it will be lost on an
//update. Deleting the comments indicating the section will prevent
//it from being updated in the future.



import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc5442.Fred.OI;
import org.usfirst.frc5442.Fred.Robot;
import org.usfirst.frc5442.Fred.RobotMap;

/**
* Command to drive straight based off of trim value on joystick
*
*/
public class  DriveStraight extends Command {

	public DriveStraight() {
     // Use requires() here to declare subsystem dependencies
     // eg. requires(chassis);
		requires(Robot.driveTrain);
 	}

 	// Called just before this Command runs the first time
 	protected void initialize() {
 		Robot.encoders.encoderLeft.reset();
 		Robot.encoders.encoderRight.reset();
 	}

 	// Called repeatedly when this Command is scheduled to run
 	protected void execute() {
 		 //Robot.driveTrain.driveStraight(OI.joystick1.getRawAxis(3));
 		Robot.driveTrain.tankDrive((-1 *(OI.xboxController.getRawAxis(3))), .974 * (-1 * (OI.xboxController.getRawAxis(3))));

 	 
 	}

 	// Make this return true when this Command no longer needs to run execute()
 	protected boolean isFinished() {
 		return false;
 	}

 	// Called once after isFinished returns true
 	protected void end() {
 		System.out.println("Left Encoder: " + Robot.encoders.encoderLeft.getDistance());
 		System.out.println("Right Encoder: " + Robot.encoders.encoderRight.getDistance());
 		Robot.driveTrain.driveStraight(0.0);
 		Robot.encoders.encoderLeft.reset();
 		Robot.encoders.encoderRight.reset();
 		
 	}

 	// Called when another command which requires one or more of the same
 	// subsystems is scheduled to run
 	protected void interrupted() {
 		System.out.println("Left Encoder: " + Robot.encoders.encoderLeft.getDistance());
 		System.out.println("Right Encoder: " + Robot.encoders.encoderRight.getDistance());
 		Robot.driveTrain.driveStraight(0.0);
 		Robot.encoders.encoderLeft.reset();
 	}
 	
    private double abs(double distance) {
		if (distance < 0)
		{
			distance = distance * -1;
		}
		return distance;
	}

}
