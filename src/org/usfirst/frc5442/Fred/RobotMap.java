// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5442.Fred;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.hal.CanTalonSRX;
import edu.wpi.first.wpilibj.interfaces.Potentiometer;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import com.kauailabs.navx_mxp.AHRS;


import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
@SuppressWarnings("unused")
public class RobotMap {
    public static SpeedController driveTrainTalonController1;
    public static SpeedController driveTrainTalonController2;
    public static SpeedController driveTrainTalonController3;
    public static SpeedController driveTrainTalonController4;
    public static SerialPort navXBoard;
    public static CANTalon m_winchController;
    public static RobotDrive driveTrainRobotDrive;
    public static Compressor pneumaticsCompressor;
    public static DoubleSolenoid manipulatorCylinder;
    public static Encoder EncoderLeft;
    public static Encoder EncoderRight;
    public static Potentiometer winchPot;
    public static AHRS imu;

    public static void init() {
        driveTrainTalonController1 = new Talon(1);
        LiveWindow.addActuator("Drive Train", "TalonController1", (Talon) driveTrainTalonController1);
        
        driveTrainTalonController2 = new Talon(2);
        LiveWindow.addActuator("Drive Train", "TalonController2", (Talon) driveTrainTalonController2);
        
        driveTrainTalonController3 = new Talon(3);
        LiveWindow.addActuator("Drive Train", "TalonController3", (Talon) driveTrainTalonController3);
        
        driveTrainTalonController4 = new Talon(4);
        LiveWindow.addActuator("Drive Train", "TalonController4", (Talon) driveTrainTalonController4);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainTalonController2, driveTrainTalonController4,
              driveTrainTalonController1, driveTrainTalonController3);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);
        
        m_winchController = new CANTalon(1);
        m_winchController.setFeedbackDevice(CANTalon.FeedbackDevice.AnalogPot);
        
        navXBoard = new SerialPort(57600,SerialPort.Port.kMXP);
        byte update_rate_hz = 50;
        imu = new AHRS(navXBoard,update_rate_hz);
        
        winchPot = new AnalogPotentiometer(0, 360, 30);
        //AnalogInput ai = new AnalogInput(1);
        //pot = new AnalogPotentiometer(ai, 360, 30);

        pneumaticsCompressor = new Compressor(0);
        
        manipulatorCylinder = new DoubleSolenoid(0, 0, 1);      
        LiveWindow.addActuator("Manipulator", "Cylinder", manipulatorCylinder);
        
        EncoderLeft = new Encoder(1, 2, false, EncodingType.k4X);
        LiveWindow.addSensor("Encoders", "Quadrature Encoder Left", EncoderLeft);
        EncoderLeft.setSamplesToAverage(5);
        EncoderLeft.setDistancePerPulse(1.0/360);
        EncoderLeft.setPIDSourceParameter(PIDSourceParameter.kDistance);
        EncoderRight = new Encoder(3, 4, false, EncodingType.k4X);
        LiveWindow.addSensor("Encoders", "Quadrature EncoderRight", EncoderRight);
        EncoderRight.setSamplesToAverage(5);
        EncoderRight.setDistancePerPulse(1.0/360);
        EncoderRight.setPIDSourceParameter(PIDSourceParameter.kDistance);
    }
}
